#!/usr/bin/env python

from os import environ, getenv
from shutil import copyfile

from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.handlers import TLS_FTPHandler, FTPHandler
from pyftpdlib.servers import FTPServer

def main():
    # Write a file containing readme information about the ftp server
    copyfile('/bin/readme.txt', environ['FTP_ROOT'] + '/readme.txt')

    # Instantiate a dummy authorizer for managing 'virtual' users
    authorizer = DummyAuthorizer()

    # Define a new user having full r/w permissions and a read-only
    # anonymous user
    authorizer.add_user(environ['FTP_USER'],
                        environ['FTP_PASS'],
                        environ['FTP_ROOT'], perm='elradfmwM')

    # Instantiate FTP handler class
    handler = FTPHandler
    handler.authorizer = authorizer

    # Define a customized banner (string returned when client connects)
    handler.banner = str(environ['FTP_READY'])

    # Specify a masquerade address and the range of ports to use for
    # passive connections. Use in case you're behind a NAT.
    if getenv('FTP_ADDRESS'):
        handler.masquerade_address = environ['FTP_ADDRESS']
    if getenv('FTP_PORTRANGE_LOW') and getenv('FTP_PORTRANGE_HIGH'):
        handler.passive_ports = range(
            int(environ['FTP_PORTRANGE_LOW']),
            int(environ['FTP_PORTRANGE_HIGH'])
        )

    # Instantiate FTP server class and listen on 0.0.0.0:<port>
    address = ('', int(environ['FTP_PORT']))
    server = FTPServer(address, handler)

    # set a limit for connections
    server.max_cons = 256
    server.max_cons_per_ip = 5

    # start ftp server
    server.serve_forever()

if __name__ == '__main__':
    main()
